<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Shiroichi&#x27;s Diary</title>
	<subtitle>ソフトウェアエンジニア。猫とボルダリングとサウナが好き</subtitle>
	<link href="https://shiroichi315.github.io/home/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://shiroichi315.github.io/home"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-05-29T00:00:00+00:00</updated>
	<id>https://shiroichi315.github.io/home/atom.xml</id>
	<entry xml:lang="en">
		<title>エンジニアとしての強みを整理してみた</title>
		<published>2022-05-29T00:00:00+00:00</published>
		<updated>2022-05-29T00:00:00+00:00</updated>
		<link href="https://shiroichi315.github.io/home/diary/organized-my-skills/" type="text/html"/>
		<id>https://shiroichi315.github.io/home/diary/organized-my-skills/</id>
		<content type="html">&lt;h2 id=&quot;jing-wei&quot;&gt;経緯&lt;&#x2F;h2&gt;
&lt;p&gt;業務で足りていないスキルが多く課題を大きく捉えすぎることで、自分がいま学ぶべきことが整理できていなかったのでエンジニアとしての強みを整理してみた&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-guo&quot;&gt;結果&lt;&#x2F;h2&gt;
&lt;p&gt;整理した結果は以下のようになった。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;shiroichi315&#x2F;home&#x2F;blob&#x2F;main&#x2F;content&#x2F;diary&#x2F;organized-my-skills.png?raw=true&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yatutemitesi-tutakoto&quot;&gt;やってみて思ったこと&lt;&#x2F;h2&gt;
&lt;p&gt;転職意欲がないからキャリアについて考える機会が少ない。と言っていたが、転職意欲関係なく常日頃からやったほうがよかったなと思った。&lt;&#x2F;p&gt;
&lt;p&gt;学ぶべきことが多いという課題を細かく分割するのを怠っていただけかもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;次にやることは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;各チケットに対して参考にしたい人を割り当てる&lt;&#x2F;li&gt;
&lt;li&gt;各チケットの優先度順に並べる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;かな〜と考えているところ。今回はここまで&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Howの知識に固執しないこと</title>
		<published>2022-04-10T00:00:00+00:00</published>
		<updated>2022-04-10T00:00:00+00:00</updated>
		<link href="https://shiroichi315.github.io/home/diary/not-obsessed-to-knowledge/" type="text/html"/>
		<id>https://shiroichi315.github.io/home/diary/not-obsessed-to-knowledge/</id>
		<content type="html">&lt;h1 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h1&gt;
&lt;p&gt;社会人生活3年目に突入し現職にも慣れてきたことで、チームのフィーチャー開発でバックエンドエンジニアとしての意見を出し、開発方針に対して判断・責任を持つことが増えてきた。&lt;&#x2F;p&gt;
&lt;p&gt;その中でソフトウェア設計に関する議論で意見をうまく伝えられない機会が何度かあり、スランプのような状態に陥っているので自分の気持ちを整理すべく言語化してみた。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ke-ti-nisi-tutakitukake&quot;&gt;課題に思ったきっかけ&lt;&#x2F;h1&gt;
&lt;p&gt;特定の領域の知識がある程度成熟してくると、いわゆる「チョットわかる」状態になってくる。自分の場合はDDD（ソフトウェア設計）に関する領域がこれにあたる。&lt;&#x2F;p&gt;
&lt;p&gt;DDDの目的は「ビジネスドメインをシステムに反映させ、ユーザーのメンタルモデルに寄り添った使いやすいシステムを構築すること」といったように自分は捉えている。（あくまで自分なりの理解を言語化したもの&lt;&#x2F;p&gt;
&lt;p&gt;ある日デザイナー・PdMの方とデザイン初稿を元にしてデザイン要件についての議論をする際に、DDDの境界づけられたコンテキスト（戦略的設計）の考え方が役に立つと思い説明をしたが、自分が話す時間が長くなり議論を長引かせてしまうことがあった。&lt;&#x2F;p&gt;
&lt;p&gt;その後も議論を続けていくと、自分がDDDの用語を説明せずとも似たような考え方に基づいた検討は既にされており、お互いの目的に対してギャップはなかった。&lt;&#x2F;p&gt;
&lt;p&gt;まずやるべきだったのは目的と現状のデザインになった理由を共有することで、DDDの用語を説明することではなかったと反省した。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mu-de-toshou-duan-wosetutonikao-enai&quot;&gt;目的と手段をセットに考えない&lt;&#x2F;h1&gt;
&lt;p&gt;この話自体、最初に目的を共有するのは当たり前、に尽きるかもしれない。ただHowの知識に固執してしまうと思考がHowに寄ってしまいやすくなる気がする、ので思考が寄らないような心がけから始めたい。&lt;&#x2F;p&gt;
&lt;p&gt;DDDの境界づけられたコンテキストはあくまで手段でしかない。DDDの目的に対応する考えは職種関係なく持っているかもしれないが、目的と手段をセットにして考えてはいけない。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zhi-shi-dakedenakushou-wodong-kasu&quot;&gt;知識だけでなく手を動かす&lt;&#x2F;h1&gt;
&lt;p&gt;関連して最近よく考えるのは知識はあくまで知識でしかないということ。「知識が役に立つ」と考えるのであれば手を動かして何かしらのアウトプットを出すことでわかりやすく伝えたい。&lt;&#x2F;p&gt;
&lt;p&gt;手を動かすことで考えが明確になり、より説得力のある意見を出せることもあるし、要望にフィットせず意見を改めることもある。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h1&gt;
&lt;p&gt;以上の内容から、「How」の「知識」に固執しないこと。を大事にしたい。&lt;&#x2F;p&gt;
&lt;p&gt;色々書いたが、プロダクト開発においてどんな考え方に基づいてアウトプットを行うか、職種を超えた共通言語があったほうがコミュニケーションが円滑になるので共通言語は欲しい。&lt;&#x2F;p&gt;
&lt;p&gt;とはいえ、DDDはあくまで開発者視点で成熟してきた手段なので、何から何まで他の職種の人に理解してもらうのはやりたくないなあ。などと考えていた。&lt;&#x2F;p&gt;
&lt;p&gt;今日はここまで。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2021年の振り返り（技術寄り）</title>
		<published>2021-12-25T00:00:00+00:00</published>
		<updated>2021-12-25T00:00:00+00:00</updated>
		<link href="https://shiroichi315.github.io/home/diary/retrospective-2021/" type="text/html"/>
		<id>https://shiroichi315.github.io/home/diary/retrospective-2021/</id>
		<content type="html">&lt;h1 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h1&gt;
&lt;p&gt;2022年になり、社会人2年目も終盤に差し掛かるタイミングでこの文章を書いている。&lt;&#x2F;p&gt;
&lt;p&gt;今回はあくまで個人の視点での振り返りをまとめる。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cheng-chang-dekitakoto&quot;&gt;成長できたこと&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;dddagilewen-mo-noyuan-ze-nijin-izhi-shi&quot;&gt;DDD・Agile文脈の原則に近い知識&lt;&#x2F;h2&gt;
&lt;p&gt;今年はパターン寄りの知識よりも、原則に近い部分を学ぶことで日々の業務のベースとなる考え方を身につけることが多かった。&lt;&#x2F;p&gt;
&lt;p&gt;DDDでいうところの戦略的設計に近い部分にあたる。&lt;&#x2F;p&gt;
&lt;p&gt;具体的にはEvans本の後半、OOCP本、XP本ｍAgile Testing Condensed等を読んでいた。&lt;&#x2F;p&gt;
&lt;p&gt;この手の原則を身に着けておくと、自分のアウトプットに理由が持てるので何かと業務・コミュニケーションが円滑に進む気がする。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tddnoshi-jian-wohan-metashi-zhuang-li&quot;&gt;TDDの実践を含めた実装力&lt;&#x2F;h2&gt;
&lt;p&gt;以前もTDDはなにをするかは理解していたけど、厳密なTDDの実践まで至ったことがなかった。&lt;&#x2F;p&gt;
&lt;p&gt;しかし2021年は厳密なTDDの実践も経験し、その上で自分なりの実装スタンスを身につけることができた。&lt;&#x2F;p&gt;
&lt;p&gt;実装スタンスを言語化しろと言われたら難しいけれど、ちゃんとテストしておきたい箇所（主にドメインロジック）から順に手を付けて、
優先順にコミットを重ねていくイメージ（例としてユースケースにおける主・副シナリオごとに1コミットみたいな粒度が好き&lt;&#x2F;p&gt;
&lt;p&gt;テスタブルなコードを書いていきたい&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qaniguan-suruzhi-shi-shi-jian&quot;&gt;QAに関する知識・実践&lt;&#x2F;h2&gt;
&lt;p&gt;QAに関する知識がほとんどない状態でフィーチャー開発のQAまでを一貫して行う立場になったのでゼロから入門した。&lt;&#x2F;p&gt;
&lt;p&gt;QAにおける各手法パターン・原則を学び、e2eテストの追加・メンテナンス等を行った。&lt;&#x2F;p&gt;
&lt;p&gt;受け入れテストまで含めてテストファーストに行っていくような視点が増えるのでとても有意義な経験をした。&lt;&#x2F;p&gt;
&lt;p&gt;立場に関係なく、「品質はみんなで守ろう」精神でやっていけたらと思う。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhang-hai-dui-ying-zhou-rinojing-yan&quot;&gt;障害対応周りの経験&lt;&#x2F;h2&gt;
&lt;p&gt;障害対応に関わることが何度かあり、その都度濃い経験をした。&lt;&#x2F;p&gt;
&lt;p&gt;「監視入門」にも障害対応に関係するようなことが書いてあり、学びが深かった。&lt;&#x2F;p&gt;
&lt;p&gt;システムの信頼性に関して、先人の知恵を身に着けていきたいと思う経験だった&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sonota-enziniaringuquan-ban&quot;&gt;その他エンジニアリング全般&lt;&#x2F;h2&gt;
&lt;p&gt;2021年中頃に読んだ「エンジニアリング組織論への入門」に書かれている内容がどれも興味深く、「エンジニアリング」という言葉に思いを馳せていた。&lt;&#x2F;p&gt;
&lt;p&gt;不確実性を潰すためには様々な視点からのアプローチが可能で、学ばなきゃいけないことが本当に多いなと。&lt;&#x2F;p&gt;
&lt;p&gt;個人のキャリアとして本に書かれている内容をさらに意識するのはもう少しあとのフェーズになると思うが、自分が最終的にやりたいことを今からでも描いていかねばと感じた。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;jian-tukatutake-ti&quot;&gt;見つかった課題&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shi-yang-she-ji-wojue-mekiruli&quot;&gt;仕様・設計を決めきる力&lt;&#x2F;h2&gt;
&lt;p&gt;昔から優柔不断な性格である自覚はあったが、フィーチャー開発を設計段階から責任を持って遂行する立場を経験したことで、決めきる力の弱さを痛感した。&lt;&#x2F;p&gt;
&lt;p&gt;「設計段階に時間をかけずにミニマムに前に進めることが大事」のような考え方もあるが、影響範囲が多い機能だとその後の展望も自分の中に持っておくのが大事で、
スコープを削って後に回した機能を決める・やりきるタイミングは必ず来る。&lt;&#x2F;p&gt;
&lt;p&gt;日々の仕様・設計に関する業務を重く捉えすぎるのも良くないと思うが、「自分がこのシステムを作っていくんだ！」という意志を持った経験だった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;detabesunetutowakudeng-nodi-reiyaji-rinozhi-shi&quot;&gt;データベース・ネットワーク等の低レイヤ寄りの知識&lt;&#x2F;h2&gt;
&lt;p&gt;エンジニアとして生きていく以上つきまとう課題だとは思うが、障害対応等をしていると自分の実力不足が明確に現れることが多い。&lt;&#x2F;p&gt;
&lt;p&gt;デッドロックが発生したときに、内部でどのような事象が発生していてどう改善すれば解消できるのか。&lt;&#x2F;p&gt;
&lt;p&gt;みたいな知識・経験がまだまだ足りず手を動かしながら学びを深める必要性を感じた。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kuraudohuan-jing-woshou-wodong-kasitegou-zhu-surujing-yan&quot;&gt;クラウド環境を手を動かして構築する経験&lt;&#x2F;h2&gt;
&lt;p&gt;IDDD本・データ指向アプリケーションデザイン・マイクロサービスパターン等を読んでいると、インプットしている内容の割に自分がゼロから構築できるモノが少ないな〜と感じた。（分散システムやドメインイベントの扱い等&lt;&#x2F;p&gt;
&lt;p&gt;幸い日々の業務でk8sやkinesis等には触れているので、参考にしつつゼロから構築する経験をしたい。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2022nian-nobao-fu&quot;&gt;2022年の抱負&lt;&#x2F;h1&gt;
&lt;p&gt;課題もやりたいこともたくさんあるので、2022年に具体的に何をするかは整理途中。&lt;&#x2F;p&gt;
&lt;p&gt;ざっくり考えている抱負としては、&lt;&#x2F;p&gt;
&lt;p&gt;「個を出すこと」&lt;&#x2F;p&gt;
&lt;p&gt;2022年は20代後半に入るので、自分の個性を確立させていきたいな〜、と。
個性を出して、チーム・会社にとって自分がどういった強みを発揮できるかを言語化していきたい。&lt;&#x2F;p&gt;
&lt;p&gt;真面目な話ばかりだったけど、まずは楽しく！
2022年もやっていき。&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
